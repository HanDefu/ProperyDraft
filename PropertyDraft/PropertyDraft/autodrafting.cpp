//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\codeguangzhou\install\application\autodrafting.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Administrator
//              Version: NX 10
//              Date: 03-18-2019  (Format: mm-dd-yyyy)
//              Time: 12:31 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "autodrafting.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(autodrafting::theSession) = NULL;
UI *(autodrafting::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
autodrafting::autodrafting()
{
    try
    {
        // Initialize the NX Open C++ API environment
        autodrafting::theSession = NXOpen::Session::GetSession();
        autodrafting::theUI = UI::GetUI();
        theDlxFileName = "autodrafting.dlx";
        theDialog = autodrafting::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        //theDialog->AddApplyHandler(make_callback(this, &autodrafting::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &autodrafting::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &autodrafting::update_cb));
        theDialog->AddCancelHandler(make_callback(this, &autodrafting::cancel_cb));
        theDialog->AddInitializeHandler(make_callback(this, &autodrafting::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &autodrafting::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
autodrafting::~autodrafting()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
void GZ_PART_DRAFT_Main()
{
    autodrafting *theautodrafting = NULL;
    try
    {
        theautodrafting = new autodrafting();
        // The following method shows the dialog immediately
        theautodrafting->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theautodrafting != NULL)
    {
        delete theautodrafting;
        theautodrafting = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------

int autodrafting::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void autodrafting::initialize_cb()
{
    try
    {
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        enumType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumType"));
        multiline_string0 = dynamic_cast<NXOpen::BlockStyler::MultilineString*>(theDialog->TopBlock()->FindBlock("multiline_string0"));
        scrolledWindow = dynamic_cast<NXOpen::BlockStyler::ScrolledWindow*>(theDialog->TopBlock()->FindBlock("scrolledWindow"));
        tree_control0 = dynamic_cast<NXOpen::BlockStyler::Tree*>(theDialog->TopBlock()->FindBlock("tree_control0"));
        coord_system0 = dynamic_cast<NXOpen::BlockStyler::SpecifyCSYS*>(theDialog->TopBlock()->FindBlock("coord_system0"));
        buttonApplyCSYS = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("buttonApplyCSYS"));
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        enumFrameType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumFrameType"));
        doubleDwgScale = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("doubleDwgScale"));
        nativeFolderBrowser01 = dynamic_cast<NXOpen::BlockStyler::FolderSelection*>(theDialog->TopBlock()->FindBlock("nativeFolderBrowser01"));
        //------------------------------------------------------------------------------
        //Registration of Treelist specific callbacks
        //------------------------------------------------------------------------------
        //tree_control0->SetOnExpandHandler(make_callback(this, &autodrafting::OnExpandCallback));
        
        //tree_control0->SetOnInsertColumnHandler(make_callback(this, &autodrafting::OnInsertColumnCallback));
        
        //tree_control0->SetOnInsertNodeHandler(make_callback(this, &autodrafting::OnInsertNodeCallback));
        
        //tree_control0->SetOnDeleteNodeHandler(make_callback(this, &autodrafting::OnDeleteNodeCallback));
        
        //tree_control0->SetOnPreSelectHandler(make_callback(this, &autodrafting::OnPreSelectCallback));
        
        tree_control0->SetOnSelectHandler(make_callback(this, &autodrafting::OnSelectCallback));
        
        //tree_control0->SetOnStateChangeHandler(make_callback(this, &autodrafting::OnStateChangeCallback));
        
        //tree_control0->SetToolTipTextHandler(make_callback(this, &autodrafting::ToolTipTextCallback));
        
        //tree_control0->SetColumnSortHandler(make_callback(this, &autodrafting::ColumnSortCallback));
        
        //tree_control0->SetStateIconNameHandler(make_callback(this, &autodrafting::StateIconNameCallback));
        
        //tree_control0->SetOnBeginLabelEditHandler(make_callback(this, &autodrafting::OnBeginLabelEditCallback));
        
        //tree_control0->SetOnEndLabelEditHandler(make_callback(this, &autodrafting::OnEndLabelEditCallback));
        
        //tree_control0->SetOnEditOptionSelectedHandler(make_callback(this, &autodrafting::OnEditOptionSelectedCallback));
        
        //tree_control0->SetAskEditControlHandler(make_callback(this, &autodrafting::AskEditControlCallback));
        
        //tree_control0->SetOnMenuHandler(make_callback(this, &autodrafting::OnMenuCallback));
        
        //tree_control0->SetOnMenuSelectionHandler(make_callback(this, &autodrafting::OnMenuSelectionCallback));
        
        //tree_control0->SetIsDropAllowedHandler(make_callback(this, &autodrafting::IsDropAllowedCallback));
        
        //tree_control0->SetIsDragAllowedHandler(make_callback(this, &autodrafting::IsDragAllowedCallback));
        
        //tree_control0->SetOnDropHandler(make_callback(this, &autodrafting::OnDropCallback));
        
        //tree_control0->SetOnDropMenuHandler(make_callback(this, &autodrafting::OnDropMenuCallback));
        
        //tree_control0->SetOnDefaultActionHandler(make_callback(this, &autodrafting::OnDefaultAction));
        
        //------------------------------------------------------------------------------
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}
void autodrafting::ReadExcelConfigData( )
{
	BasicExcel excel;
    char regfile[256]="";
    sheetNames.clear();
    //sheetNames.push_back("全部");
    sprintf(regfile,"%s\\Parameter\\Config.xls",getenv("UGII_USER_DIR"));
	bool isOk = excel.Load(regfile);
	if( isOk )
	{
        int num = excel.GetTotalWorkSheets();
        for( int idx = 0; idx < num; ++idx )
        {
            const wchar_t* sheetName = excel.GetUnicodeSheetName(idx);
			sheetNames.push_back(WCHARTOCHAR(sheetName));
        }
	}
	return;
}
//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void autodrafting::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
		char file_name[UF_CFI_MAX_PATH_NAME_SIZE]="";
		char dspec[MAX_FSPEC_BUFSIZE]="";
		char fname[UF_CFI_MAX_FILE_NAME_BUFSIZE]="";
		StlTagVector solidboies;
        ReadExcelConfigData();
        enumType->GetProperties()->SetEnumMembers("Value",sheetNames);
		CF_GetCurrentPartSolidBodies(solidboies);
		CreateUITree(solidboies,true);

		tag_t disPart = UF_PART_ask_display_part();
		UF_PART_ask_part_name (disPart, file_name );
		uc4576(file_name,2,dspec,fname);
		nativeFolderBrowser01->GetProperties()->SetString("Path",dspec);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int autodrafting::CreateUITree( StlTagVector& bodies, logical insertCol )
{
    StlNXStringVector ColumnNames;
    ColumnNames.push_back("名称");
    ColumnNames.push_back("图纸");
    ColumnNames.push_back("比例");
    int nodeCount = 1;
    if( insertCol )
    {
        for( int idx = 0; idx < ColumnNames.size(); ++idx )
        {
            tree_control0->InsertColumn( idx, ColumnNames[idx], 106 );
            tree_control0->SetColumnSortable( idx, false );
            //treeID->SetColumnResizePolicy(idx,Tree::ColumnResizePolicyResizeWithContents);
        }
        //tree_control0->SetColumnResizePolicy(0,Tree::ColumnResizePolicyResizeWithContents);
    }
    for( int idx = 0; idx < bodies.size(); ++idx )
    {
        // 名称
        char temStr[MAX_FSPEC_SIZE] = "";
        sprintf( temStr, "零件%02d",  nodeCount );
        UF_ATTR_value_t attr_spec_name;
        std::vector<NXOpen::TaggedObject *>objects;
        BlockStyler::Node* node = tree_control0->CreateNode(temStr);
        nodeCount++;
		objects.push_back( ( NXOpen::TaggedObject *)NXOpen::NXObjectManager::Get(bodies[idx]) );
        NXOpen::DataContainer *nodeData = node->GetNodeData();
        nodeData->AddTaggedObjectVector("Data",objects);
        tree_control0->InsertNode(node, NULL, NULL, Tree::NodeInsertOptionLast);
        for( int kdx = 0; kdx < ColumnNames.size(); ++kdx )
        {
            if( 0 == strcmp("图纸", ColumnNames[kdx].GetLocaleText() ) )
            {
                node->SetColumnDisplayText( kdx, NXString("A4横", NXString::Locale) );
            }
            else if( 0 == strcmp("比例", ColumnNames[kdx].GetLocaleText() ) )
            {
                node->SetColumnDisplayText( kdx, NXString("1.0", NXString::Locale) );
            }
        }
    }
    return 0;
}

static void export_sheet_to_acad_dwg2d( char* inputfile, char* outputfile, NXString& drawingName )
{
	NXOpen::Session *theSession = NXOpen::Session::GetSession();
    NXOpen::Part *workPart(theSession->Parts()->Work());
    NXOpen::Part *displayPart(theSession->Parts()->Display());

	int status = 0;
	UF_CFI_ask_file_exist(outputfile,&status);
	if( 0 == status )
	{
		uc4561(outputfile,0);
	}
	char *p_env;
    char dwgdef[MAX_FSPEC_SIZE];
    p_env = getenv("UGII_USER_DIR");
    strcpy(dwgdef,p_env);
    strcat(dwgdef,"\\application\\dxfdwg.def");
  
    NXOpen::DxfdwgCreator *dxfdwgCreator1;
    dxfdwgCreator1 = theSession->DexManager()->CreateDxfdwgCreator();
    
    dxfdwgCreator1->SetExportData(NXOpen::DxfdwgCreator::ExportDataOptionDrawing);
    
    dxfdwgCreator1->SetAutoCADRevision(NXOpen::DxfdwgCreator::AutoCADRevisionOptionsR2004);
    
    dxfdwgCreator1->SetViewEditMode(true);
    
    dxfdwgCreator1->SetFlattenAssembly(true);
    
    dxfdwgCreator1->ObjectTypes()->SetCurves(true);
    
    dxfdwgCreator1->ObjectTypes()->SetAnnotations(true);
    
    dxfdwgCreator1->ObjectTypes()->SetStructures(true);
    
    dxfdwgCreator1->SetFlattenAssembly(false);
    
    dxfdwgCreator1->SetSettingsFile(dwgdef);
    
    dxfdwgCreator1->SetOutputFileType(NXOpen::DxfdwgCreator::OutputFileTypeOptionDwg);
    
    dxfdwgCreator1->SetInputFile(inputfile);
    
    dxfdwgCreator1->SetOutputFile(outputfile);
    
    dxfdwgCreator1->SetExportSplinesAs(NXOpen::DxfdwgCreator::ExportSplinesAsOptionsPolyline2D);
    
    //dxfdwgCreator1->SetTextFontMappingFile("C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\Admi0A188E06nlb3.txt");
    
    dxfdwgCreator1->SetWidthFactorMode(NXOpen::DxfdwgCreator::WidthfactorMethodOptionsAutomaticCalculation);
    
    //dxfdwgCreator1->SetCrossHatchMappingFile("C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\Admi0A188E06nlb4.txt");
    
    //dxfdwgCreator1->SetLineFontMappingFile("C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\Admi0A188E06nlb5.txt");
    
    dxfdwgCreator1->SetLayerMask("1-256");
    
    dxfdwgCreator1->SetDrawingList( drawingName );
    
    NXOpen::NXObject *nXObject1;
    nXObject1 = dxfdwgCreator1->Commit();
    
    dxfdwgCreator1->Destroy();
	int count = 0;
    UF_CFI_ask_file_exist(outputfile,&status);
    while( count < 300 && 1 == status)
    {
        _sleep(1000);
        count++;
        UF_CFI_ask_file_exist(outputfile,&status);
    }
}

static tag_t  CreateDWGPart( )
{
	tag_t partTag = NULL_TAG;
	char sFilePath[UF_CFI_MAX_PATH_NAME_SIZE]="";
	char file_name[UF_CFI_MAX_PATH_NAME_SIZE]="";
	char fname[_MAX_FNAME];

	NXOpen::Session *theSession = NXOpen::Session::GetSession();

	tag_t disPart = UF_PART_ask_display_part();
	tag_t rootocc = UF_ASSEM_ask_root_part_occ(disPart);
	UF_PART_ask_part_name (disPart, file_name );
	char *p = strstr(file_name,".prt");
	if( p != NULL )
	{
		*p='\0';
	}
	char *p_env = getenv("UGII_USER_DIR");
	char srcspc[MAX_FSPEC_SIZE]="";
	char desspc[MAX_FSPEC_SIZE]="";
	sprintf(srcspc,"%s\\templates\\gz_dwg.prt",p_env);
	sprintf(desspc,"%s_dwg.prt",file_name);
	int status = uc4567( srcspc,desspc,UF_CFI_COPY_ALWAYS_REPLACE,0,2);
	UF_CFI_ask_file_exist(desspc,&status);
	if(0  == status )
	{
		UF_PART_load_status_t error_status;
		tag_t new_drawing_tag = NULL_TAG;
		UF_PART_open(desspc,&partTag, &error_status);
		//UF_ASSEM_set_work_part_quietly(partTag,&disPart);
		UF_PART_free_load_status(&error_status);
		if(partTag != NULL_TAG)
		{
			theSession->ApplicationSwitchImmediate("UG_APP_DRAFTING");
		}
	}
	return partTag;
}

tag_t GetReferencesetBody(tag_t part,NXString& refsetName)
{
	tag_t body = NULL_TAG;
	tag_t refset = NULL_TAG;
  	UF_OBJ_cycle_by_name_and_type(part, refsetName.GetLocaleText(),UF_reference_set_type, FALSE, &refset);
	if( refset != NULL_TAG )
	{
		int n_members = 0;
		tag_t * members = NULL;
		UF_ASSEM_ask_ref_set_members( refset , & n_members , & members ) ;
		for( int i = 0 ; i < n_members ; i ++ )
		{
			int type = 0, subtype = 0;
			UF_OBJ_ask_type_and_subtype( members[ i ] , & type , & subtype ) ;
			if (type == UF_solid_type && subtype == UF_solid_body_subtype &&
				UF_OBJ_ALIVE == UF_OBJ_ask_status( members[ i ] ) )
			{
				body = members[i];
			}
		}
		UF_free( members ) ;
	}
	return body;
}



static tag_t CreateBaseView(tag_t partTag, NXString viewType, NXString& refset,Point3d& viewRefPoint, double stdscale )
{
	tag_t viewTag = NULL_TAG;

	NXOpen::Session *theSession = NXOpen::Session::GetSession();
    NXOpen::Part *workPart(theSession->Parts()->Work());

    NXOpen::Drawings::BaseView *nullNXOpen_Drawings_BaseView(NULL);
    NXOpen::Drawings::BaseViewBuilder *baseViewBuilder1;
    baseViewBuilder1 = workPart->DraftingViews()->CreateBaseViewBuilder(nullNXOpen_Drawings_BaseView);
    
    baseViewBuilder1->Placement()->SetAssociative(true);
    
    char part_fspec[MAX_FSPEC_SIZE+1] = "";
	tag_t part = partTag;
	if(UF_ASSEM_is_occurrence(partTag))
	{
		part = UF_ASSEM_ask_prototype_of_occ(partTag);
	}
    UF_PART_ask_part_name(part,part_fspec);

	Part *part1(dynamic_cast<Part *>(NXOpen::NXObjectManager::Get(part)));
    bool loadStatus1;
    loadStatus1 = part1->IsFullyLoaded();
	if( !loadStatus1 )
		part1->LoadFully();
    
    NXOpen::ModelingView *modelingView2(dynamic_cast<NXOpen::ModelingView *>(part1->ModelingViews()->FindObject(viewType)));
    baseViewBuilder1->SelectModelView()->SetSelectedView(modelingView2);
    
    NXOpen::Assemblies::Arrangement *nullNXOpen_Assemblies_Arrangement(NULL);
    baseViewBuilder1->Style()->ViewStyleBase()->Arrangement()->SetSelectedArrangement(nullNXOpen_Assemblies_Arrangement);
    
    baseViewBuilder1->Style()->ViewStyleBase()->SetPart(part1);
    
    baseViewBuilder1->Style()->ViewStyleBase()->SetPartName(NXString(part_fspec));
    
	NXOpen::NXObject *nXObject2;
	//logical adjust = false;
	//NXOpen::Vector3d vec1(0.0, 0.0, 1.0);
	//NXOpen::Vector3d vec2(1.0, 0.0, 0.0);
	if( 0 == strcmp("Top",viewType.GetText()) )
	{
		workPart->DrawingSheets()->CurrentDrawingSheet();
		Drawings::DrawingSheet *drawingSheet1= workPart->DrawingSheets()->CurrentDrawingSheet();
		Drawings::DrawingSheetBuilder *drawingSheetBuilder1;
		drawingSheetBuilder1 = workPart->DrawingSheets()->DrawingSheetBuilder(drawingSheet1);
		double sheetlen = drawingSheetBuilder1->Length();
		double sheethei = drawingSheetBuilder1->Height();
		drawingSheetBuilder1->Destroy();

		NXOpen::Direction *direction1;
		NXOpen::Point3d origin1(0.0, 0.0, 0.0);
		NXOpen::Vector3d vector1(0.0, 0.0, 1.0);
		NXOpen::Vector3d vector2(1.0, 0.0, 0.0);

		tag_t body = GetReferencesetBody(part,refset);
		if( NULL_TAG != body )
		{
			char VZx[133]="",VZy[133]="",VZz[133]="";
			char VXx[133]="",VXy[133]="",VXz[133]="";
			int irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_NORMAL_DIR_X,VZx);
			if( 0 == irc )
			{
				irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_NORMAL_DIR_Y,VZy);
			}
			if( 0 == irc )
			{
				irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_NORMAL_DIR_Z,VZz);
			}
			if( 0 == irc )
			{
				irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_X_DIR_X,VXx);
			}
			if( 0 == irc )
			{
				irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_X_DIR_Y,VXy);
			}
			if( 0 == irc )
			{
				irc = Roy_ask_obj_string_attr(body,ATTR_DRAFTING_X_DIR_Z,VXz);
			}
			if( 0 == irc )
			{
				vector1.X = atof(VZx);
				vector1.Y = atof(VZy);
				vector1.Z = atof(VZz);
				vector2.X = atof(VXx);
				vector2.Y = atof(VXy);
				vector2.Z = atof(VXz);
			}
		}
		
		direction1 = workPart->Directions()->CreateDirection(origin1, vector1, NXOpen::SmartObject::UpdateOptionAfterModeling);
		baseViewBuilder1->Style()->ViewStyleOrientation()->Ovt()->SetNormalDirection(direction1);

		NXOpen::Direction *direction2;
		direction2 = workPart->Directions()->CreateDirection(origin1, vector2, NXOpen::SmartObject::UpdateOptionAfterModeling);
		baseViewBuilder1->Style()->ViewStyleOrientation()->Ovt()->SetXDirection(direction2);

        viewRefPoint.X = sheetlen/2;
		viewRefPoint.Y = sheethei/2;
		viewRefPoint.Z = 0;
	}
	else
	{
		//baseViewBuilder1->Scale()->SetDenominator(1.0);
	}
	baseViewBuilder1->Scale()->SetDenominator(stdscale);
    baseViewBuilder1->Placement()->Placement()->SetValue(NULL, workPart->Views()->WorkView(), viewRefPoint);
	
	nXObject2 = baseViewBuilder1->Commit();
    viewTag = nXObject2->Tag();

	baseViewBuilder1->Destroy();

	/*if(adjust)
		AdjustViewDirection(viewTag,vec1,vec2);*/
    return viewTag;
}

static int ROY_UF_VIEW_ask_xy_clip(tag_t view_tag ,double scale, double xy_clip_bounds[4] )
{
	double xy_boud[4] = {0,0,0,0};
	int irc = UF_VIEW_ask_xy_clip(view_tag,xy_boud);
	for( int idx = 0; idx < 4; idx++ )
	{
		xy_clip_bounds[idx] = xy_boud[idx]/scale;
	}
	return irc;
}

static tag_t CreateProjectView( tag_t topView, const double x, const double y)
{
    Session *theSession = Session::GetSession();
    Part *workPart(theSession->Parts()->Work());
    Part *displayPart(theSession->Parts()->Display());
    Drawings::ProjectedView *nullDrawings_ProjectedView(NULL);
    Drawings::ProjectedViewBuilder *projectedViewBuilder1;
    projectedViewBuilder1 = workPart->DraftingViews()->CreateProjectedViewBuilder(nullDrawings_ProjectedView);
    
    //Drawings::BaseView *baseView1(dynamic_cast<Drawings::BaseView *>(workPart->DraftingViews()->FindObject("TOP@1")));
	Drawings::BaseView *baseView1(dynamic_cast<Drawings::BaseView *>(NXOpen::NXObjectManager::Get(topView)));

    projectedViewBuilder1->Parent()->View()->SetValue(baseView1);
    
    projectedViewBuilder1->Style()->ViewStyleDetail()->SetViewBoundaryWidth(Preferences::WidthOriginal);
    
    //projectedViewBuilder1->Style()->ViewStyleBase()->SetPartName("E:\\xingtai\\RYF140628-UG\\RYF140628-UG\\RYF140628-GAUGE\\RYF-test_dwg.prt");
    
    projectedViewBuilder1->Style()->ViewStyleDetail()->SetViewBoundaryWidth(Preferences::WidthNormal);
    
    projectedViewBuilder1->Style()->ViewStyleGeneral()->SetToleranceValue(0.213614);    
    
    projectedViewBuilder1->Placement()->AlignmentView()->SetValue(baseView1);
    
    Point3d point2(x, y, 0.0);
    projectedViewBuilder1->Placement()->Placement()->SetValue(NULL, workPart->Views()->WorkView(), point2);
    
    projectedViewBuilder1->Placement()->AlignmentView()->SetValue(baseView1);
    
    NXObject *nXObject3;
    nXObject3 = projectedViewBuilder1->Commit();
	tag_t viewTag = nXObject3->Tag();

    projectedViewBuilder1->Destroy();
	return viewTag;
}

static void MoveBaseView( tag_t viewTag ,double x, double y)
{
	Session *theSession = Session::GetSession();
    Part *workPart(theSession->Parts()->Work());

    NXOpen::Drawings::BaseViewBuilder *baseViewBuilder1;
    Drawings::BaseView *baseView1(dynamic_cast<Drawings::BaseView *>(NXOpen::NXObjectManager::Get(viewTag)));
    baseViewBuilder1 = workPart->DraftingViews()->CreateBaseViewBuilder(baseView1);

    Point3d point2(x, y, 0.0);
    baseViewBuilder1->Placement()->Placement()->SetValue(NULL, workPart->Views()->WorkView(), point2);
    
    NXObject *nXObject3;
    nXObject3 = baseViewBuilder1->Commit();
    baseViewBuilder1->Destroy();
}

static void MoveProjectView( tag_t projectview ,double x, double y)
{
	Session *theSession = Session::GetSession();
    Part *workPart(theSession->Parts()->Work());
    Drawings::ProjectedView *nullDrawings_ProjectedView(NULL);
    Drawings::ProjectedViewBuilder *projectedViewBuilder1;
    
	//Drawings::BaseView *baseView1(dynamic_cast<Drawings::BaseView *>(NXOpen::NXObjectManager::Get(topView)));
	Drawings::ProjectedView *projectView1(dynamic_cast<Drawings::ProjectedView *>(NXOpen::NXObjectManager::Get(projectview)));

	projectedViewBuilder1 = workPart->DraftingViews()->CreateProjectedViewBuilder(projectView1);

   /* projectedViewBuilder1->Parent()->View()->SetValue(baseView1);

	projectedViewBuilder1->Placement()->AlignmentView()->SetValue(baseView1);*/
    
    Point3d point2(x, y, 0.0);
    projectedViewBuilder1->Placement()->Placement()->SetValue(NULL, workPart->Views()->WorkView(), point2);
    
    //projectedViewBuilder1->Placement()->AlignmentView()->SetValue(baseView1);
    
    NXObject *nXObject3;
    nXObject3 = projectedViewBuilder1->Commit();
	//tag_t viewTag = nXObject3->Tag();

    projectedViewBuilder1->Destroy();
}

static int CreateBaseAndProjectViews( tag_t partTag, NXString& refset, double stdscale, tag_t &symbolView, double viewxbound[4],double& sug)//6,75, x-6, y-36 v // 6,75, x-59, y-6 h
{
	Session *theSession = Session::GetSession();
    Part *workPart(theSession->Parts()->Work());
	NXOpen::Point3d point1(0, 0, 0.0);
	tag_t baseView = CreateBaseView(partTag,"Top",refset, point1,stdscale);

    tag_t proto = partTag;
    tag_t currentDrawing = NULL_TAG;
    tag_t *comps = NULL;
    tag_t disp = UF_PART_ask_display_part();
    if(UF_ASSEM_is_occurrence(partTag))
        proto = UF_ASSEM_ask_prototype_of_occ(partTag);
    tag_t rootocc = UF_ASSEM_ask_root_part_occ(disp);
    int n = UF_ASSEM_ask_part_occ_children(rootocc, &comps);
    for( int idx = 0; idx < n; ++idx )
    {
        tag_t compPro = UF_ASSEM_ask_prototype_of_occ(comps[idx]);
        if( compPro == proto )
        {
            int err = 0;
            UF_ASSEM_replace_refset(1,&comps[idx],refset.GetLocaleText());
            tag_t baseView2 = CreateBaseView(partTag,"Top",refset, point1,stdscale);
            UF_VIEW_delete(baseView,&err);
            baseView = baseView2;
        }
    }
    UF_DRAW_ask_current_drawing(&currentDrawing);
    UF_DRAW_upd_out_of_date_views(currentDrawing);
    UF_free(comps);

    double sheetLen = point1.X*2;
    double sheetHei = point1.Y*2;
	tag_t projectViewl = CreateProjectView(baseView,point1.X, point1.Y-50);
    tag_t projectViewr = CreateProjectView(baseView,point1.X+50, point1.Y);
	double xy_boud1[4] = {0,0,0,0};
	double xy_boud2[4] = {0,0,0,0};
	double xy_boud3[4] = {0,0,0,0};
	double xy_boud4[4] = {0,0,0,0};
	ROY_UF_VIEW_ask_xy_clip(baseView,stdscale,xy_boud1);
	ROY_UF_VIEW_ask_xy_clip(projectViewl,stdscale,xy_boud2);
    ROY_UF_VIEW_ask_xy_clip(projectViewr,stdscale,xy_boud3);
    double viewHei = xy_boud1[3]-xy_boud1[2] + xy_boud2[3]-xy_boud2[2];
    double viewLen = xy_boud1[1]-xy_boud1[0] + xy_boud3[1]-xy_boud3[0];
    double drawingareaHei = 0;
    double drawingareaLen = 0;
    if(sheetLen > sheetHei) //h
    {
        drawingareaLen = sheetLen-65-20;
        drawingareaHei = sheetHei-81-20;
    }
    else //v 
    {
        drawingareaLen = sheetLen-12-20;
        drawingareaHei = sheetHei-111-20;
    }
	if( (viewHei >= drawingareaHei || viewLen >= drawingareaLen) &&  stdscale < 19.9 ) //adjust scale
    {
		int err = 0;//-->A3 UF_DRAW_set_drawing_info
        double sug1 = (viewLen-25.4)/(drawingareaLen-25.4);
        double sug2 = (viewHei-25.4)/(drawingareaHei-25.4);
        if( sug1 > sug2 )
            sug = sug1;
        else
            sug = sug2;
		UF_VIEW_delete(projectViewl,&err);
		UF_VIEW_delete(projectViewr,&err);
		UF_VIEW_delete(baseView,&err);
        return 1;
    }
    else
    {
        Drawings::DrawingSheet *drawingSheet1= workPart->DrawingSheets()->CurrentDrawingSheet();
        Drawings::DrawingSheetBuilder *drawingSheetBuilder1;
        drawingSheetBuilder1 = workPart->DrawingSheets()->DrawingSheetBuilder(drawingSheet1);
        drawingSheetBuilder1->SetStandardMetricScale(NXOpen::Drawings::DrawingSheetBuilder::SheetStandardMetricScaleCustom);
        drawingSheetBuilder1->SetScaleNumerator(1.0);
        drawingSheetBuilder1->SetScaleDenominator(stdscale);
        NXOpen::NXObject *nXObject1;
        nXObject1 = drawingSheetBuilder1->Commit();
        drawingSheetBuilder1->Destroy();
    }
	if( drawingareaHei > viewHei && drawingareaLen > viewLen )
	{
		double gaph = (drawingareaHei - viewHei)/3;
		double gapl = (drawingareaLen - viewLen)/3;
		double baseview_x = 6+gapl+(xy_boud1[1]-xy_boud1[0])/2;
		double baseview_y = 75+gaph*2+(xy_boud1[3]-xy_boud1[2])/2+xy_boud2[3]-xy_boud2[2];
		double projeclview_x = baseview_x;
		double projeclview_y = 75+gaph+(xy_boud2[3]-xy_boud2[2])/2;
		double projecRview_x = 6+gapl*2+xy_boud1[1]-xy_boud1[0]+(xy_boud3[1]-xy_boud3[0])/2;
		double projecRview_y = baseview_y;
		MoveBaseView(baseView,baseview_x,baseview_y );
        viewxbound[0] = baseview_x-(xy_boud1[1]-xy_boud1[0])/2;
        viewxbound[1] = baseview_y-(xy_boud1[3]-xy_boud1[2])/2;
		viewxbound[2] = baseview_x+(xy_boud1[1]-xy_boud1[0])/2;
        viewxbound[3] = baseview_y+(xy_boud1[3]-xy_boud1[2])/2;
		MoveProjectView(projectViewl,projeclview_x,projeclview_y);
		MoveProjectView(projectViewr,projecRview_x,projecRview_y);

		NXOpen::Point3d point2(projecRview_x, projeclview_y, 0.0);
		/*tag_t IsometricView = CreateBaseView(partTag,"Isometric", point2,stdscale*2);
		NXOpen::Session *theSession = NXOpen::Session::GetSession();
		NXOpen::Part *workPart(theSession->Parts()->Work());
		std::vector<NXOpen::Drawings::DraftingView *> views1(2);
		NXOpen::Drawings::ProjectedView *projectedView1(dynamic_cast<NXOpen::Drawings::ProjectedView *>(NXOpen::NXObjectManager::Get(projectViewl)));
		NXOpen::Drawings::ProjectedView *projectedView2(dynamic_cast<NXOpen::Drawings::ProjectedView *>(NXOpen::NXObjectManager::Get(projectViewr)));
		views1[0] = projectedView1;
		views1[1] = projectedView2;
		workPart->DraftingViews()->UpdateViews(views1);
		ROY_UF_VIEW_ask_xy_clip(IsometricView,stdscale*2,xy_boud1);
		if(stdscale<20)
		{
			if(projecRview_x+xy_boud1[1]>sheetLen || projecRview_x-xy_boud1[1] <  projeclview_x+(xy_boud2[1]-xy_boud2[0])/2)
			{
				int err = 0;
				UF_VIEW_delete(projectViewl,&err);
				UF_VIEW_delete(projectViewr,&err);
				UF_VIEW_delete(baseView,&err);
				UF_VIEW_delete(IsometricView,&err);
				return 1;
			}
		}*/
	}
    symbolView = baseView;
	return 0;
}

static void CreateDrawingViewDWG(tag_t part, NXString& name,NXString& frame,NXString& scale,NXString& typeStr)
{
	UF_DRAW_info_t drawing_info;
	drawing_info.drawing_scale = 1.0;
	drawing_info.units = UF_PART_METRIC;
	drawing_info.projection_angle = UF_DRAW_FIRST_ANGLE_PROJECTION;
	drawing_info.size_state = UF_DRAW_METRIC_SIZE;

	UF_import_part_modes_t modes;
	tag_t group = NULL_TAG;
	tag_t new_drawing_tag = NULL_TAG;
	char titleblock[MAX_FSPEC_SIZE] = "";
	double dest_csys[6]={1,0,0,0,1,0};
	double dest_point[3]={0,0,0};
	modes.layer_mode=1;
	modes.group_mode=1;
	modes.csys_mode=0;
	modes.plist_mode=0;
	modes.view_mode=0;
	modes.cam_mode=false;
	modes.use_search_dirs=false;
	char *p_env = getenv("UGII_USER_DIR");
	if( 0 == strcmp("A3横",frame.GetLocaleText()))
	{
		drawing_info.size_state = UF_DRAW_METRIC_SIZE;
		drawing_info.size.metric_size_code = UF_DRAW_A3;
		sprintf(titleblock,"%s\\templates\\A3.prt",p_env);
	}
	else if( 0 == strcmp("A3竖",frame.GetLocaleText()))
	{
		drawing_info.size_state = UF_DRAW_CUSTOM_SIZE;
		drawing_info.size.custom_size[0]=420;
		drawing_info.size.custom_size[1]=297;
		sprintf(titleblock,"%s\\templates\\A3V.prt",p_env);
	}
	else //if( 0 == strcmp("A4横",frame.GetLocaleText()))
	{
		drawing_info.size_state = UF_DRAW_METRIC_SIZE;
		drawing_info.size.metric_size_code = UF_DRAW_A4;
		sprintf(titleblock,"%s\\templates\\A4%s.prt",p_env,typeStr.GetLocaleText());
	}
	UF_DRAW_create_drawing( name.getLocaleText(), &drawing_info,&new_drawing_tag);
	UF_DRAW_open_drawing( new_drawing_tag );
	UF_PART_import(titleblock,&modes,dest_csys,dest_point,1.0,&group);
	//Point3d pt;
	tag_t view = NULL_TAG;//CreateBaseView(part,"Top",pt,1.0);
    double sug = 0,stdscale = 1;
    double viewbound[4]={0,0,0,0};
    int irc = CreateBaseAndProjectViews(part,name,stdscale,view,viewbound,sug);
    //double stdscale[] = {1.5,2,2.5,3,5,10};
    while( 0 != irc && stdscale < 20.5)
    {
        stdscale+=0.5; 
        while(stdscale<sug-0.1)
        {
            if(stdscale < 10.0)
                stdscale+=0.5;
            else
                stdscale+=1.0;
        }
        irc = CreateBaseAndProjectViews(part,name,stdscale,view,viewbound,sug);
    }
	UF_PART_save();
}
//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
#if 0
int autodrafting::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		std::vector<Node*> SelectedNodes;
		NXOpen::BlockStyler::Node * treeNode = tree_control0->RootNode();
		while( NULL != treeNode )
		{
			SelectedNodes.push_back(treeNode);
			treeNode = treeNode->NextNode();
		}
        for( int idx = 0; idx < SelectedNodes.size(); ++idx )
        {
            NXOpen::DataContainer *nodeData = SelectedNodes[idx]->GetNodeData();
            std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
            if( objects.size() > 0 )
            {
				StlTagVector bodies;
				bodies.push_back(objects[0]->Tag());
				NXString name = SelectedNodes[idx]->GetColumnDisplayText(0);
				CreateReferenceSet(bodies,name);
            }
        }
		tag_t disp = UF_PART_ask_display_part();
		tag_t newpart = CreateDWGPart();
		if( NULL_TAG != newpart )
		{
			for( int idx = 0; idx < SelectedNodes.size(); ++idx )
			{
				NXOpen::DataContainer *nodeData = SelectedNodes[idx]->GetNodeData();
				std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
				if( objects.size() > 0 )
				{
					NXString name = SelectedNodes[idx]->GetColumnDisplayText(0);
					NXString frame = SelectedNodes[idx]->GetColumnDisplayText(1);
					NXString scale = SelectedNodes[idx]->GetColumnDisplayText(2);
					CreateDrawingViewDWG(name,frame,scale);
				}
			}
			UF_PART_save();
			UF_PART_close(newpart,0,1);
			theSession->ApplicationSwitchImmediate("UG_APP_MODELING");
		}
		UF_PART_set_display_part(disp);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}
#endif
//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int autodrafting::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == enumType)
        {
        //---------Enter your code here-----------
        }
        else if(block == multiline_string0)
        {
        //---------Enter your code here-----------
        }
        else if(block == coord_system0)
        {
        //---------Enter your code here-----------
        }
        else if(block == buttonApplyCSYS)
        {
        //---------Enter your code here-----------
			Point3d originPoint;
			double org[3] = {0.0,0,0}, csys[6] = {1,0,0,0,1,0};
			std::vector<NXOpen::TaggedObject* > csysObjects = coord_system0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
			if( csysObjects.size() > 0 )
			{
				tag_t csys_tag = csysObjects[0]->Tag();
				NXOpen::CoordinateSystem *coord_system = (NXOpen::CoordinateSystem *)NXOpen::NXObjectManager::Get(csys_tag);
				originPoint =  coord_system->Origin(); 
				NXOpen::NXMatrix *matrix = coord_system->Orientation();
				Matrix3x3 matrix33 = matrix->Element();
				csys[0] = matrix33.Xx;
				csys[1] = matrix33.Xy;
				csys[2] = matrix33.Xz;
				csys[3] = matrix33.Zx;
				csys[4] = matrix33.Zy;
				csys[5] = matrix33.Zz;
				//org[0] = originPoint.X; org[1] = originPoint.Y;org[2] = originPoint.Z;
			}
			std::vector<Node*> SelectedNodes = tree_control0->GetSelectedNodes();
			for( int idx = 0; idx < SelectedNodes.size(); ++idx )
			{
				NXOpen::DataContainer *nodeData = SelectedNodes[idx]->GetNodeData();
				std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
				if( objects.size() > 0 && csysObjects.size() > 0 )
				{
					char str[133]="";
					tag_t body =objects[0]->Tag();
					sprintf(str,"%g",csys[0]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_X_DIR_X,str);
					sprintf(str,"%g",csys[1]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_X_DIR_Y,str);
					sprintf(str,"%g",csys[2]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_X_DIR_Z,str);
					sprintf(str,"%g",csys[3]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_NORMAL_DIR_X,str);
					sprintf(str,"%g",csys[4]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_NORMAL_DIR_Y,str);
					sprintf(str,"%g",csys[5]);
					Royal_set_obj_attr(body,ATTR_DRAFTING_NORMAL_DIR_Z,str);
				}
			}
        }
        else if(block == enumFrameType)
        {
        //---------Enter your code here-----------
            std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
            NXString frame = enumFrameType->GetProperties()->GetEnumAsString("Value");
            for(int idx = 0; idx < nodes.size();++idx )
            {
                nodes[idx]->SetColumnDisplayText(1,frame);
            }
        }
        else if(block == doubleDwgScale)
        {
        //---------Enter your code here-----------
            std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
            double scale = doubleDwgScale->GetProperties()->GetDouble("Value");
            char str[133]="";
            sprintf(str,"%.01f",scale);
            for(int idx = 0; idx < nodes.size();++idx )
            {
                nodes[idx]->SetColumnDisplayText(2,str);
            }
        }
        else if(block == nativeFolderBrowser01)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int autodrafting::ok_cb()
{
    int errorCode = 0;
    try
    {
        //errorCode = apply_cb();
		char inputfile[UF_CFI_MAX_PATH_NAME_SIZE]="";
		char outputfile[UF_CFI_MAX_PATH_NAME_SIZE]="";
		std::vector<Node*> SelectedNodes;
		NXString typeStr = enumType->GetProperties()->GetEnumAsString("Value");
		NXString savepath = nativeFolderBrowser01->GetProperties()->GetString("Path");

		NXOpen::BlockStyler::Node * treeNode = tree_control0->RootNode();
		while( NULL != treeNode )
		{
			SelectedNodes.push_back(treeNode);
			treeNode = treeNode->NextNode();
		}
        for( int idx = 0; idx < SelectedNodes.size(); ++idx )
        {
            NXOpen::DataContainer *nodeData = SelectedNodes[idx]->GetNodeData();
            std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
            if( objects.size() > 0 )
            {
				StlTagVector bodies;
				bodies.push_back(objects[0]->Tag());
				NXString name = SelectedNodes[idx]->GetColumnDisplayText(0);
				CreateReferenceSet(bodies,name);
            }
        }
		tag_t disp = UF_PART_ask_display_part();
		tag_t newpart = CreateDWGPart();
		if( NULL_TAG != newpart )
		{
			UF_PART_ask_part_name(newpart,inputfile);
			for( int idx = 0; idx < SelectedNodes.size(); ++idx )
			{
				NXOpen::DataContainer *nodeData = SelectedNodes[idx]->GetNodeData();
				std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
				if( objects.size() > 0 )
				{
					NXString name = SelectedNodes[idx]->GetColumnDisplayText(0);
					NXString frame = SelectedNodes[idx]->GetColumnDisplayText(1);
					NXString scale = SelectedNodes[idx]->GetColumnDisplayText(2);
					CreateDrawingViewDWG(disp,name,frame,scale,typeStr);
					sprintf(outputfile,"%s\\%s.dwg",savepath.GetLocaleText(),name.GetLocaleText());
					export_sheet_to_acad_dwg2d(inputfile,outputfile,name);
				}
			}
			//UF_PART_save();
			//UF_PART_close(newpart,0,1);
			//theSession->ApplicationSwitchImmediate("UG_APP_MODELING");
		}
		//UF_PART_set_display_part(disp);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int autodrafting::cancel_cb()
{
    try
    {
        //---- Enter your callback code here -----
        std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
        for( int idx = 0; idx < nodes.size(); ++idx )
        {
            NXOpen::DataContainer *nodeData = nodes[idx]->GetNodeData();
            std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
            if( objects.size() > 0 )
            {
                UF_DISP_set_highlight(objects[0]->Tag(),0);
            }
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}
//------------------------------------------------------------------------------
//Treelist specific callbacks
//------------------------------------------------------------------------------
//void autodrafting::OnExpandCallback (NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnInsertColumnCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//void autodrafting::OnInsertNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnDeleteNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnPreSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int ID, bool selected)
//{
//}

void autodrafting::OnSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, bool selected)
{
    NXOpen::DataContainer *nodeData = node->GetNodeData();
    std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
    if( objects.size() > 0 )
    {
        if( selected )
        {
            UF_DISP_set_highlight(objects[0]->Tag(),1);
            NXString type = node->GetColumnDisplayText(1);
            NXString scale = node->GetColumnDisplayText(2);
            enumFrameType->GetProperties()->SetEnumAsString("Value",type.GetLocaleText());
			double sc = atof(scale.GetText());
			doubleDwgScale->GetProperties()->SetDouble("Value",sc);
        }
        else
            UF_DISP_set_highlight(objects[0]->Tag(),0);
    }
}

//void autodrafting::OnStateChangeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state)
//{
//}

//NXString autodrafting::ToolTipTextCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//int autodrafting::ColumnSortCallback(NXOpen::BlockStyler::Tree *tree, int columnID, NXOpen::BlockStyler::Node *node1, NXOpen::BlockStyler::Node *node2)
//{
//}

//NXString autodrafting::StateIconNameCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state)
//{
//}

//NXOpen::BlockStyler::Tree::BeginLabelEditState autodrafting::OnBeginLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//NXOpen::BlockStyler::Tree::EndLabelEditState autodrafting::OnEndLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int, NXString editedText)
//{
//}

//NXOpen::BlockStyler::Tree::EditControlOption autodrafting::OnEditOptionSelectedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, int selectedOptionID, NXString selectedOptionText, NXOpen::BlockStyler::Tree::ControlType type)
//{
//}

//NXOpen::BlockStyler::Tree::ControlType autodrafting::AskEditControlCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//void autodrafting::OnMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID )
//{
//}

//void autodrafting::OnMenuSelectionCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int menuItemID)
//{
//}

//NXOpen::BlockStyler::Node::DropType autodrafting::IsDropAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID)
//{
//}

//NXOpen::BlockStyler::Node::DragType autodrafting::IsDragAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//bool autodrafting::OnDropCallback(NXOpen::BlockStyler::Tree *tree, std::vector<NXOpen::BlockStyler::Node *> node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID, NXOpen::BlockStyler::Node::DropType dropType, int dropMenuItemId)
//{
//}

//void autodrafting::OnDropMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID)
//{
//}

//void autodrafting::OnDefaultAction(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}


//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* autodrafting::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
