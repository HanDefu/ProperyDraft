//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\codeguangzhou\install\application\autodrafting.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Administrator
//              Version: NX 10
//              Date: 03-18-2019  (Format: mm-dd-yyyy)
//              Time: 12:31 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "autodrafting.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(autodrafting::theSession) = NULL;
UI *(autodrafting::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
autodrafting::autodrafting()
{
    try
    {
        // Initialize the NX Open C++ API environment
        autodrafting::theSession = NXOpen::Session::GetSession();
        autodrafting::theUI = UI::GetUI();
        theDlxFileName = "autodrafting.dlx";
        theDialog = autodrafting::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &autodrafting::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &autodrafting::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &autodrafting::update_cb));
        theDialog->AddCancelHandler(make_callback(this, &autodrafting::cancel_cb));
        theDialog->AddInitializeHandler(make_callback(this, &autodrafting::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &autodrafting::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
autodrafting::~autodrafting()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
void GZ_PART_DRAFT_Main()
{
    autodrafting *theautodrafting = NULL;
    try
    {
        theautodrafting = new autodrafting();
        // The following method shows the dialog immediately
        theautodrafting->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theautodrafting != NULL)
    {
        delete theautodrafting;
        theautodrafting = NULL;
    }
}

//------------------------------------------------------------------------------
// This method specifies how a shared image is unloaded from memory
// within NX. This method gives you the capability to unload an
// internal NX Open application or user  exit from NX. Specify any
// one of the three constants as a return value to determine the type
// of unload to perform:
//
//
//    Immediately : unload the library as soon as the automation program has completed
//    Explicitly  : unload the library from the "Unload Shared Image" dialog
//    AtTermination : unload the library when the NX session terminates
//
//
// NOTE:  A program which associates NX Open applications with the menubar
// MUST NOT use this option since it will UNLOAD your NX Open application image
// from the menubar.
//------------------------------------------------------------------------------

int autodrafting::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void autodrafting::initialize_cb()
{
    try
    {
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        enumType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumType"));
        multiline_string0 = dynamic_cast<NXOpen::BlockStyler::MultilineString*>(theDialog->TopBlock()->FindBlock("multiline_string0"));
        scrolledWindow = dynamic_cast<NXOpen::BlockStyler::ScrolledWindow*>(theDialog->TopBlock()->FindBlock("scrolledWindow"));
        tree_control0 = dynamic_cast<NXOpen::BlockStyler::Tree*>(theDialog->TopBlock()->FindBlock("tree_control0"));
        coord_system0 = dynamic_cast<NXOpen::BlockStyler::SpecifyCSYS*>(theDialog->TopBlock()->FindBlock("coord_system0"));
        buttonApplyCSYS = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("buttonApplyCSYS"));
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        enumFrameType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumFrameType"));
        doubleDwgScale = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("doubleDwgScale"));
        nativeFolderBrowser01 = dynamic_cast<NXOpen::BlockStyler::FolderSelection*>(theDialog->TopBlock()->FindBlock("nativeFolderBrowser01"));
        //------------------------------------------------------------------------------
        //Registration of Treelist specific callbacks
        //------------------------------------------------------------------------------
        //tree_control0->SetOnExpandHandler(make_callback(this, &autodrafting::OnExpandCallback));
        
        //tree_control0->SetOnInsertColumnHandler(make_callback(this, &autodrafting::OnInsertColumnCallback));
        
        //tree_control0->SetOnInsertNodeHandler(make_callback(this, &autodrafting::OnInsertNodeCallback));
        
        //tree_control0->SetOnDeleteNodeHandler(make_callback(this, &autodrafting::OnDeleteNodeCallback));
        
        //tree_control0->SetOnPreSelectHandler(make_callback(this, &autodrafting::OnPreSelectCallback));
        
        tree_control0->SetOnSelectHandler(make_callback(this, &autodrafting::OnSelectCallback));
        
        //tree_control0->SetOnStateChangeHandler(make_callback(this, &autodrafting::OnStateChangeCallback));
        
        //tree_control0->SetToolTipTextHandler(make_callback(this, &autodrafting::ToolTipTextCallback));
        
        //tree_control0->SetColumnSortHandler(make_callback(this, &autodrafting::ColumnSortCallback));
        
        //tree_control0->SetStateIconNameHandler(make_callback(this, &autodrafting::StateIconNameCallback));
        
        //tree_control0->SetOnBeginLabelEditHandler(make_callback(this, &autodrafting::OnBeginLabelEditCallback));
        
        //tree_control0->SetOnEndLabelEditHandler(make_callback(this, &autodrafting::OnEndLabelEditCallback));
        
        //tree_control0->SetOnEditOptionSelectedHandler(make_callback(this, &autodrafting::OnEditOptionSelectedCallback));
        
        //tree_control0->SetAskEditControlHandler(make_callback(this, &autodrafting::AskEditControlCallback));
        
        //tree_control0->SetOnMenuHandler(make_callback(this, &autodrafting::OnMenuCallback));
        
        //tree_control0->SetOnMenuSelectionHandler(make_callback(this, &autodrafting::OnMenuSelectionCallback));
        
        //tree_control0->SetIsDropAllowedHandler(make_callback(this, &autodrafting::IsDropAllowedCallback));
        
        //tree_control0->SetIsDragAllowedHandler(make_callback(this, &autodrafting::IsDragAllowedCallback));
        
        //tree_control0->SetOnDropHandler(make_callback(this, &autodrafting::OnDropCallback));
        
        //tree_control0->SetOnDropMenuHandler(make_callback(this, &autodrafting::OnDropMenuCallback));
        
        //tree_control0->SetOnDefaultActionHandler(make_callback(this, &autodrafting::OnDefaultAction));
        
        //------------------------------------------------------------------------------
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}
void autodrafting::ReadExcelConfigData( )
{
	BasicExcel excel;
    char regfile[256]="";
    sheetNames.clear();
    sheetNames.push_back("全部");
    sprintf(regfile,"%s\\Parameter\\Config.xls",getenv("UGII_USER_DIR"));
	bool isOk = excel.Load(regfile);
	if( isOk )
	{
        int num = excel.GetTotalWorkSheets();
        for( int idx = 0; idx < num; ++idx )
        {
            const wchar_t* sheetName = excel.GetUnicodeSheetName(idx);
			sheetNames.push_back(WCHARTOCHAR(sheetName));
        }
	}
	return;
}
//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void autodrafting::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
		StlTagVector solidboies;
        ReadExcelConfigData();
        enumType->GetProperties()->SetEnumMembers("Value",sheetNames);
		CF_GetCurrentPartSolidBodies(solidboies);
		CreateUITree(solidboies,true);
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

int autodrafting::CreateUITree( StlTagVector& bodies, logical insertCol )
{
    StlNXStringVector ColumnNames;
    ColumnNames.push_back("名称");
    ColumnNames.push_back("图纸");
    ColumnNames.push_back("比例");
    int nodeCount = 1;
    if( insertCol )
    {
        for( int idx = 0; idx < ColumnNames.size(); ++idx )
        {
            tree_control0->InsertColumn( idx, ColumnNames[idx], 106 );
            tree_control0->SetColumnSortable( idx, false );
            //treeID->SetColumnResizePolicy(idx,Tree::ColumnResizePolicyResizeWithContents);
        }
        //tree_control0->SetColumnResizePolicy(0,Tree::ColumnResizePolicyResizeWithContents);
    }
    for( int idx = 0; idx < bodies.size(); ++idx )
    {
        // 名称
        char temStr[MAX_FSPEC_SIZE] = "";
        sprintf( temStr, "零件%02d",  nodeCount );
        UF_ATTR_value_t attr_spec_name;
        std::vector<NXOpen::TaggedObject *>objects;
        BlockStyler::Node* node = tree_control0->CreateNode(temStr);
        nodeCount++;
		objects.push_back( ( NXOpen::TaggedObject *)NXOpen::NXObjectManager::Get(bodies[idx]) );
        NXOpen::DataContainer *nodeData = node->GetNodeData();
        nodeData->AddTaggedObjectVector("Data",objects);
        tree_control0->InsertNode(node, NULL, NULL, Tree::NodeInsertOptionLast);
        for( int kdx = 0; kdx < ColumnNames.size(); ++kdx )
        {
            if( 0 == strcmp("图纸", ColumnNames[kdx].GetLocaleText() ) )
            {
                node->SetColumnDisplayText( kdx, NXString("A4横", NXString::Locale) );
            }
            else if( 0 == strcmp("比例", ColumnNames[kdx].GetLocaleText() ) )
            {
                node->SetColumnDisplayText( kdx, NXString("1.0", NXString::Locale) );
            }
        }
    }
    return 0;
}
//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int autodrafting::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int autodrafting::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == enumType)
        {
        //---------Enter your code here-----------
        }
        else if(block == multiline_string0)
        {
        //---------Enter your code here-----------
        }
        else if(block == coord_system0)
        {
        //---------Enter your code here-----------
        }
        else if(block == buttonApplyCSYS)
        {
        //---------Enter your code here-----------
        }
        else if(block == enumFrameType)
        {
        //---------Enter your code here-----------
            std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
            NXString frame = enumFrameType->GetProperties()->GetEnumAsString("Value");
            for(int idx = 0; idx < nodes.size();++idx )
            {
                nodes[idx]->SetColumnDisplayText(1,frame);
            }
        }
        else if(block == doubleDwgScale)
        {
        //---------Enter your code here-----------
            std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
            double scale = doubleDwgScale->GetProperties()->GetDouble("Value");
            char str[133]="";
            sprintf(str,"%.01f",scale);
            for(int idx = 0; idx < nodes.size();++idx )
            {
                nodes[idx]->SetColumnDisplayText(2,str);
            }
        }
        else if(block == nativeFolderBrowser01)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int autodrafting::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: cancel_Cb
//------------------------------------------------------------------------------
int autodrafting::cancel_cb()
{
    try
    {
        //---- Enter your callback code here -----
        std::vector<Node*> nodes = tree_control0->GetSelectedNodes();
        for( int idx = 0; idx < nodes.size(); ++idx )
        {
            NXOpen::DataContainer *nodeData = nodes[idx]->GetNodeData();
            std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
            if( objects.size() > 0 )
            {
                UF_DISP_set_highlight(objects[0]->Tag(),0);
            }
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        autodrafting::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}
//------------------------------------------------------------------------------
//Treelist specific callbacks
//------------------------------------------------------------------------------
//void autodrafting::OnExpandCallback (NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnInsertColumnCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//void autodrafting::OnInsertNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnDeleteNodeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node)
//{
//}

//void autodrafting::OnPreSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int ID, bool selected)
//{
//}

void autodrafting::OnSelectCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, bool selected)
{
    NXOpen::DataContainer *nodeData = node->GetNodeData();
    std::vector<NXOpen::TaggedObject *>objects = nodeData->GetTaggedObjectVector("Data");
    if( objects.size() > 0 )
    {
        if( selected )
        {
            UF_DISP_set_highlight(objects[0]->Tag(),1);//
            NXString type = node->GetColumnDisplayText(0);
            //enumFrameType->GetProperties()->SetEnumAsString("Value",type.GetUTF8Text());
        }
        else
            UF_DISP_set_highlight(objects[0]->Tag(),0);
    }
}

//void autodrafting::OnStateChangeCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state)
//{
//}

//NXString autodrafting::ToolTipTextCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//int autodrafting::ColumnSortCallback(NXOpen::BlockStyler::Tree *tree, int columnID, NXOpen::BlockStyler::Node *node1, NXOpen::BlockStyler::Node *node2)
//{
//}

//NXString autodrafting::StateIconNameCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int state)
//{
//}

//NXOpen::BlockStyler::Tree::BeginLabelEditState autodrafting::OnBeginLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//NXOpen::BlockStyler::Tree::EndLabelEditState autodrafting::OnEndLabelEditCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int, NXString editedText)
//{
//}

//NXOpen::BlockStyler::Tree::EditControlOption autodrafting::OnEditOptionSelectedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, int selectedOptionID, NXString selectedOptionText, NXOpen::BlockStyler::Tree::ControlType type)
//{
//}

//NXOpen::BlockStyler::Tree::ControlType autodrafting::AskEditControlCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//void autodrafting::OnMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID )
//{
//}

//void autodrafting::OnMenuSelectionCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int menuItemID)
//{
//}

//NXOpen::BlockStyler::Node::DropType autodrafting::IsDropAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID)
//{
//}

//NXOpen::BlockStyler::Node::DragType autodrafting::IsDragAllowedCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}

//bool autodrafting::OnDropCallback(NXOpen::BlockStyler::Tree *tree, std::vector<NXOpen::BlockStyler::Node *> node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID, NXOpen::BlockStyler::Node::DropType dropType, int dropMenuItemId)
//{
//}

//void autodrafting::OnDropMenuCallback(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID, NXOpen::BlockStyler::Node *targetNode, int targetColumnID)
//{
//}

//void autodrafting::OnDefaultAction(NXOpen::BlockStyler::Tree *tree, NXOpen::BlockStyler::Node *node, int columnID)
//{
//}


//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* autodrafting::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
