//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\codeRoyal\Royal_code\install\application\Bom.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Administrator
//              Version: NX 10
//              Date: 03-18-2019  (Format: mm-dd-yyyy)
//              Time: 20:19 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "Bom.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(Bom::theSession) = NULL;
UI *(Bom::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
Bom::Bom()
{
    try
    {
        // Initialize the NX Open C++ API environment
        Bom::theSession = NXOpen::Session::GetSession();
        Bom::theUI = UI::GetUI();
        theDlxFileName = "Bom.dlx";
        theDialog = Bom::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &Bom::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &Bom::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &Bom::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &Bom::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &Bom::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
Bom::~Bom()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
void GZ_PART_BOM_Main()
{
    Bom *theBom = NULL;
    try
    {
        theBom = new Bom();
        // The following method shows the dialog immediately
        theBom->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theBom != NULL)
    {
        delete theBom;
        theBom = NULL;
    }
}



int Bom::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void Bom::initialize_cb()
{
    try
    {
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        toggleOutAll = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggleOutAll"));
        enumType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumType"));
        bodySelect = dynamic_cast<NXOpen::BlockStyler::BodyCollector*>(theDialog->TopBlock()->FindBlock("bodySelect"));
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        matName = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("matName"));
        MatNO = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("MatNO"));
        matSize = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("matSize"));
        material = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("material"));
        desnity = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("desnity"));
        length = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("length"));
        togglearea = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("togglearea"));
        togglequantity = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("togglequantity"));
        toggleWeight = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggleWeight"));
        unitPrice = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("unitPrice"));
        totalPrice = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("totalPrice"));
        supplier = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("supplier"));
        toggleRemark = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggleRemark"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void Bom::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

static logical CheckBodyType(tag_t body, NXString& type)
{
	logical is = false;
	return is;
}
//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int Bom::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		std::vector<tag_t> bombodies;
		logical logicalmatName = matName->GetProperties()->GetLogical("Value");
		logical logicalMatNO = MatNO->GetProperties()->GetLogical("Value");
		logical logicalmatSize = matSize->GetProperties()->GetLogical("Value");
		logical logicalmaterial = material->GetProperties()->GetLogical("Value");
		logical logicaldesnity = desnity->GetProperties()->GetLogical("Value");
		logical logicallength = length->GetProperties()->GetLogical("Value");
		logical logicalarea = togglearea->GetProperties()->GetLogical("Value");
		logical logicalquantity = togglequantity->GetProperties()->GetLogical("Value");
		logical logicalWeight = toggleWeight->GetProperties()->GetLogical("Value");
		logical logicalunitPrice = unitPrice->GetProperties()->GetLogical("Value");
		logical logicaltotalPrice = totalPrice->GetProperties()->GetLogical("Value");
		logical logicalsupplier = supplier->GetProperties()->GetLogical("Value");
		logical logicalRemark = toggleRemark->GetProperties()->GetLogical("Value");

		std::vector<NXOpen::TaggedObject* > objects = bodySelect->GetProperties()->GetTaggedObjectVector("SelectedObjects");
		NXString typeStr = enumType->GetProperties()->GetEnumAsString("Value");
		if(objects.size()>0)
		{
			for(int idx = 0; idx < objects.size(); ++idx)
			{
				if( strcmp("全部",typeStr.GetLocaleText()))
				{
					bombodies.push_back(objects[idx]->Tag());
				}
				else if(CheckBodyType(objects[idx]->Tag(),typeStr))
				{
					bombodies.push_back(objects[idx]->Tag());
				}
			}
		}
		if(objects.size()>0)
		{
			char file_name[UF_CFI_MAX_PATH_NAME_SIZE]="";
			char fname[_MAX_FNAME]="";
			char sFilePath[_MAX_FNAME]="";
			int status = 0;
			tag_t disPart = UF_PART_ask_display_part();
			UF_PART_ask_part_name (disPart, file_name );
			char *p = strstr(file_name,".prt");
			if( p != NULL )
			{
				*p='\0';
			}
			uc4576 (file_name, 2, sFilePath, fname );
			char *p_env = getenv("UGII_USER_DIR");
			char srcspc[MAX_FSPEC_SIZE]="";
			char desspc[MAX_FSPEC_SIZE]="";
			sprintf(srcspc,"%s\\application\\GZBOM.xlsx",p_env);
			UF_CFI_ask_file_exist(srcspc,&status);
			if( 0 != status )
			{
				uc1601("没有找到模板文件",1);
				return;
			}
			sprintf(desspc,"%s_%s_BOM.xlsx",file_name,typeStr.GetLocaleText());

			Excel::CExcelUtil xls;
			//CString xlsName =  L"C:\\mytemplate.xlsx";
			xls.OpenExcel(srcspc);
			xls.SaveAs(desspc);
			xls.SetVisible(true);
			xls.SetActiveSheet(1);
			CString str;
			for (int i = 0; i < 10; i++)
			{
				str.Format(L"%d", i+1);
				xls.SetCellValue(i+2, 1, str);
			}
			xls.CloseExcel();
		}
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int Bom::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == toggleOutAll)
        {
        //---------Enter your code here-----------
        }
        else if(block == enumType)
        {
        //---------Enter your code here-----------
        }
        else if(block == bodySelect)
        {
        //---------Enter your code here-----------
        }
        else if(block == matName)
        {
        //---------Enter your code here-----------
        }
        else if(block == MatNO)
        {
        //---------Enter your code here-----------
        }
        else if(block == matSize)
        {
        //---------Enter your code here-----------
        }
        else if(block == material)
        {
        //---------Enter your code here-----------
        }
        else if(block == desnity)
        {
        //---------Enter your code here-----------
        }
        else if(block == length)
        {
        //---------Enter your code here-----------
        }
        else if(block == togglearea)
        {
        //---------Enter your code here-----------
        }
        else if(block == togglequantity)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggleWeight)
        {
        //---------Enter your code here-----------
        }
        else if(block == unitPrice)
        {
        //---------Enter your code here-----------
        }
        else if(block == totalPrice)
        {
        //---------Enter your code here-----------
        }
        else if(block == supplier)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggleRemark)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int Bom::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Bom::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* Bom::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
