//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\codeguangzhou\install\application\Property.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Administrator
//              Version: NX 10
//              Date: 03-18-2019  (Format: mm-dd-yyyy)
//              Time: 19:52 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "Property.hpp"
using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(Property::theSession) = NULL;
UI *(Property::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
Property::Property()
{
    try
    {
        // Initialize the NX Open C++ API environment
        Property::theSession = NXOpen::Session::GetSession();
        Property::theUI = UI::GetUI();
        theDlxFileName = "Property.dlx";
        theDialog = Property::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &Property::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &Property::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &Property::update_cb));
        theDialog->AddFilterHandler(make_callback(this, &Property::filter_cb));
        theDialog->AddInitializeHandler(make_callback(this, &Property::initialize_cb));
        theDialog->AddFocusNotifyHandler(make_callback(this, &Property::focusNotify_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &Property::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
Property::~Property()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}
//------------------------------- DIALOG LAUNCHING ---------------------------------
//
//    Before invoking this application one needs to open any part/empty part in NX
//    because of the behavior of the blocks.
//
//    Make sure the dlx file is in one of the following locations:
//        1.) From where NX session is launched
//        2.) $UGII_USER_DIR/application
//        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
//            recommended. This variable is set to a full directory path to a file 
//            containing a list of root directories for all custom applications.
//            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_ROOT_DIR\menus\custom_dirs.dat
//
//    You can create the dialog using one of the following way:
//
//    1. USER EXIT
//
//        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
//        2) Invoke the Shared Library through File->Execute->NX Open menu.
//
//------------------------------------------------------------------------------
void GZ_PART_ATTR_Main()
{
    Property *theProperty = NULL;
    try
    {
        theProperty = new Property();
        // The following method shows the dialog immediately
        theProperty->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theProperty != NULL)
    {
        delete theProperty;
        theProperty = NULL;
    }
}

int Property::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void Property::initialize_cb()
{
    try
    {
        group = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group"));
        str_techReq = dynamic_cast<NXOpen::BlockStyler::MultilineString*>(theDialog->TopBlock()->FindBlock("str_techReq"));
        group3 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group3"));
        enumType = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enumType"));
        bodySelect0 = dynamic_cast<NXOpen::BlockStyler::BodyCollector*>(theDialog->TopBlock()->FindBlock("bodySelect0"));
        group1 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group1"));
        enum09 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum09"));
        enum08 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum08"));
        coord_system0 = dynamic_cast<NXOpen::BlockStyler::SpecifyCSYS*>(theDialog->TopBlock()->FindBlock("coord_system0"));
        buttonCalculate = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("buttonCalculate"));
        bodyLen = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("bodyLen"));
        bodyWidth = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("bodyWidth"));
        bodyarea = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("bodyarea"));
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        matName = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("matName"));
        matNO = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("matNO"));
        matSize = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("matSize"));
        material = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("material"));
        matDensity = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("matDensity"));
        unitPrice = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("unitPrice"));
        supplier = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("supplier"));
        weight = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("weight"));
        totalPrice = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("totalPrice"));
        remark = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("remark"));
        toggleoutNO = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("toggleoutNO"));
        group4 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group4"));
        coord_system01 = dynamic_cast<NXOpen::BlockStyler::SpecifyCSYS*>(theDialog->TopBlock()->FindBlock("coord_system01"));
        group2 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group2"));
        hideBody = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("hideBody"));
        enum011 = dynamic_cast<NXOpen::BlockStyler::Enumeration*>(theDialog->TopBlock()->FindBlock("enum011"));
        inheriteFrombody = dynamic_cast<NXOpen::BlockStyler::Toggle*>(theDialog->TopBlock()->FindBlock("inheriteFrombody"));
        selectFrombody = dynamic_cast<NXOpen::BlockStyler::BodyCollector*>(theDialog->TopBlock()->FindBlock("selectFrombody"));
        buttonHideBody = dynamic_cast<NXOpen::BlockStyler::Button*>(theDialog->TopBlock()->FindBlock("buttonHideBody"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

void Property::ReadExcelConfigData( )
{
	BasicExcel excel;
    char regfile[256]="";
    sprintf(regfile,"%s\\Parameter\\Config.xls",getenv("UGII_USER_DIR"));
	bool isOk = excel.Load(regfile);
	if( isOk )
	{
        int num = excel.GetTotalWorkSheets();
        for( int idx = 0; idx < num; ++idx )
        {
            const wchar_t* sheetName = excel.GetUnicodeSheetName(idx);
			sheetNames.push_back(WCHARTOCHAR(sheetName));
            BasicExcelWorksheet* sheet1 = excel.GetWorksheet(sheetName);
            if (sheet1)
            {
                size_t maxRows = sheet1->GetTotalRows();
                size_t maxCols = sheet1->GetTotalCols();
                {
                    VecNXStringVector sheetData;
                    for(int i = 0; i < maxCols; i++)
                    {
                        StlNXStringVector matNameEtc;
                        for(int j = 1; j < maxRows; ++j)
                        {
                            BasicExcelCell *cel = sheet1->Cell(j,i);
                            matNameEtc.push_back(cel->Get());
                        }
                        sheetData.push_back(matNameEtc);
                    }
                    configData.push_back(sheetData);
                }
            }
        }
	}
	return;
}

void Property::SetUIConfigData( )
{
    int type = enumType->GetProperties()->GetEnum("Value");
    if( configData.size()-1 < type )
    {
        type = 0;
    }
    if( configData.size() > 0 )
    {
        VecNXStringVector temp = configData[type];
        matName->GetProperties()->SetEnumMembers("Value",temp[0]);
        matNO->GetProperties()->SetEnumMembers("Value",temp[1]);
        matSize->GetProperties()->SetEnumMembers("Value",temp[2]);
        material->GetProperties()->SetEnumMembers("Value",temp[3]);
        matDensity->GetProperties()->SetEnumMembers("Value",temp[4]);
        unitPrice->GetProperties()->SetEnumMembers("Value",temp[5]);
        supplier->GetProperties()->SetEnumMembers("Value",temp[6]);
        remark->GetProperties()->SetEnumMembers("Value",temp[7]);
    }
}
//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void Property::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
        ReadExcelConfigData();
        logical inheritBody = inheriteFrombody->GetProperties()->GetLogical("Value");
        selectFrombody->GetProperties()->SetLogical("Show",inheritBody);
        logical out  = toggleoutNO->GetProperties()->GetLogical("Value");
        coord_system01->GetProperties()->SetLogical("Show",out);
        enumType->GetProperties()->SetEnumMembers("Value",sheetNames);
        SetUIConfigData();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int Property::apply_cb()
{
    int errorCode = 0;
    try
    {
        //---- Enter your callback code here -----
		std::vector<NXOpen::TaggedObject* > objects = bodySelect0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
		if(objects.size()>0)
		{
			tag_t body = objects[0]->Tag();
			NXString type = enumType->GetProperties()->GetEnumAsString("Value");
			NXString name = matName->GetProperties()->GetEnumAsString("Value");
			NXString maNO = matNO->GetProperties()->GetEnumAsString("Value");
			NXString size = matSize->GetProperties()->GetEnumAsString("Value");
			NXString mate = material->GetProperties()->GetEnumAsString("Value");
			NXString dens = matDensity->GetProperties()->GetEnumAsString("Value");
			NXString unpr = unitPrice->GetProperties()->GetEnumAsString("Value");
			NXString supp = supplier->GetProperties()->GetEnumAsString("Value");
			NXString rema = remark->GetProperties()->GetEnumAsString("Value");

			double topr = totalPrice->GetProperties()->GetDouble("Value");
			double weig = weight->GetProperties()->GetDouble("Value");
			char toprStr[133]="";
			char weigStr[133]="";
			sprintf(toprStr,"%f",topr);
			sprintf(weigStr,"%f",weig);
			Royal_set_obj_attr(body,"材料类型",type.GetLocaleText());
			Royal_set_obj_attr(body,"材料名称",name.GetLocaleText());
			Royal_set_obj_attr(body,"材料编号",maNO.GetLocaleText());
			Royal_set_obj_attr(body,"规格",size.GetLocaleText());
			Royal_set_obj_attr(body,"材质",mate.GetLocaleText());
			Royal_set_obj_attr(body,"密度",dens.GetLocaleText());
			Royal_set_obj_attr(body,"单价",unpr.GetLocaleText());
			Royal_set_obj_attr(body,"供应商",supp.GetLocaleText());
			Royal_set_obj_attr(body,"重量",weigStr);
			Royal_set_obj_attr(body,"总价",toprStr);
			Royal_set_obj_attr(body,"备注",rema.GetLocaleText());
			Royal_set_obj_attr(body,"已设零件标记","1");
			logical is = toggleoutNO->GetProperties()->GetLogical("Value");
			if(is)
				Royal_set_obj_attr(body,"输出材料编号","1");
			else
				Royal_set_obj_attr(body,"输出材料编号","0");
            logical blank = hideBody->GetProperties()->GetLogical("Value");
            if(blank)
                UF_OBJ_set_blank_status( body,UF_OBJ_BLANKED);
		}
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int Property::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == str_techReq)
        {
        //---------Enter your code here-----------
        }
        else if(block == enumType)
        {
        //---------Enter your code here-----------
            SetUIConfigData();
        }
        else if(block == bodySelect0)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum09)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum08)
        {
        //---------Enter your code here-----------
        }
        else if(block == coord_system0)
        {
        //---------Enter your code here-----------
        }
        else if(block == buttonCalculate)
        {
        //---------Enter your code here-----------
			SetBodyBoundingBoxSize();
        }
        else if(block == bodyLen)
        {
        //---------Enter your code here-----------
        }
        else if(block == bodyWidth)
        {
        //---------Enter your code here-----------
        }
        else if(block == bodyarea)
        {
        //---------Enter your code here-----------
        }
        else if(block == matName)
        {
        //---------Enter your code here-----------
        }
        else if(block == matNO)
        {
        //---------Enter your code here-----------
        }
        else if(block == matSize)
        {
        //---------Enter your code here-----------
        }
        else if(block == material)
        {
        //---------Enter your code here-----------
        }
        else if(block == matDensity)
        {
        //---------Enter your code here-----------
        }
        else if(block == unitPrice)
        {
        //---------Enter your code here-----------
        }
        else if(block == supplier)
        {
        //---------Enter your code here-----------
        }
        else if(block == weight)
        {
        //---------Enter your code here-----------
        }
        else if(block == totalPrice)
        {
        //---------Enter your code here-----------
        }
        else if(block == remark)
        {
        //---------Enter your code here-----------
        }
        else if(block == toggleoutNO)
        {
        //---------Enter your code here-----------
            logical out  = toggleoutNO->GetProperties()->GetLogical("Value");
            coord_system01->GetProperties()->SetLogical("Show",out);
        }
        else if(block == coord_system01)
        {
        //---------Enter your code here-----------
        }
        else if(block == hideBody)
        {
        //---------Enter your code here-----------
        }
        else if(block == enum011)
        {
        //---------Enter your code here-----------
        }
        else if(block == inheriteFrombody)
        {
        //---------Enter your code here-----------
			logical inheritBody = inheriteFrombody->GetProperties()->GetLogical("Value");
			selectFrombody->GetProperties()->SetLogical("Show",inheritBody);
        }
        else if(block == selectFrombody)
        {
        //---------Enter your code here-----------
        }
        else if(block == buttonHideBody)
        {
        //---------Enter your code here-----------
            StlTagVector solidboies;
            CF_GetCurrentPartSolidBodies(solidboies);
            for(int idx = 0; idx < solidboies.size(); ++idx )
            {
                if(USER_ask_obj_has_attr(solidboies[idx],"已设零件标记"))
                    UF_OBJ_set_blank_status( solidboies[idx],UF_OBJ_BLANKED);
            }
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

int Property::SetBodyBoundingBoxSize( )
{
	int irc = 0;
	std::vector<NXOpen::TaggedObject* > csysObjects = coord_system0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
	std::vector<NXOpen::TaggedObject* > objects = bodySelect0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
	if( objects.size() > 0 )
	{
		tag_t csys_tag = NULL_TAG;
		tag_t body = objects[0]->Tag();
		if(csysObjects.size() > 0 )
		{
			csys_tag = csysObjects[0]->Tag();
		}
		double min_corner[3]={0.0},directions[3][3]={0.0},distances[3] = {0.0};  
		double box[6] = {0.0};
		UF_MODL_ask_bounding_box_exact( body, csys_tag, min_corner, directions, distances );
		//UF_MODL_ask_bounding_box(objects.at(idx)->GetTag(), box );
		bodyLen->GetProperties()->SetDouble("Value",distances[0]);
		bodyWidth->GetProperties()->SetDouble("Value",distances[1]);
		bodyarea->GetProperties()->SetDouble("Value",distances[2]);
	}
	return irc;
}
//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int Property::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: filter_cb
//------------------------------------------------------------------------------
int Property::filter_cb(NXOpen::BlockStyler::UIBlock* block, NXOpen::TaggedObject* selectObject)
{
    return(UF_UI_SEL_ACCEPT);
}

//------------------------------------------------------------------------------
//Callback Name: focusNotify_cb
//This callback is executed when any block (except the ones which receive keyboard entry such as Integer block) receives focus.
//------------------------------------------------------------------------------
void Property::focusNotify_cb(NXOpen::BlockStyler::UIBlock* block, bool focus)
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        Property::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* Property::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
