//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  E:\Projects\GDUG2019\Src\ProperyDraft\install\application\CaoLiaoBianHao.cpp
//
//        This file was generated by the NX Block UI Styler
//        Created by: Administrator
//              Version: NX 12
//              Date: 04-07-2019  (Format: mm-dd-yyyy)
//              Time: 19:29 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C++ source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "CaoLiaoBianHao.hpp"
#include "Common_Function.h"
#include "uf_csys.h"
#include "NXOpen\CoordinateSystem.hxx"
#include "NXOpen\NXObjectManager.hxx"
#include "NXOpen\NXMatrix.hxx"
#include "Common_Function_UG.h"

#include "Property.hpp"
#include "Common.h"
#include "Common_UI.h"
#include <NXOpen/Body.hxx>
#include <NXOpen/BodyCollection.hxx>
#include <NXOpen/NXMatrix.hxx>
#include <NXOpen/NXMatrixCollection.hxx>
#include <NXOpen/CoordinateSystem.hxx>
#include <NXOpen/CoordinateSystemCollection.hxx>
#include <NXOpen/Part.hxx>
#include <NXOpen/PartCollection.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/Measure.hxx>
#include <NXOpen/MeasureBuilder.hxx>
#include <NXOpen/MeasureFaces.hxx>
#include <NXOpen/MeasureFaceBuilder.hxx>
#include <NXOpen/MeasureManager.hxx>
#include <NXOpen/FaceDumbRule.hxx>
#include <NXOpen/ScRuleFactory.hxx>
#include <NXOpen/Unit.hxx>
#include <NXOpen/UnitCollection.hxx>
#include "Common_Function.h"
#include "Common_Function_UG.h"
#include "Excel/BasicExcel.hpp"


static tag_t CreateText(NXString& textStr, char* textHeight, Point3d coordinates2, Vector3d xDirection1, Vector3d yDirection1)
{
	NXOpen::Session *theSession = NXOpen::Session::GetSession();
	NXOpen::Part *workPart(theSession->Parts()->Work());

	NXOpen::Features::Text *nullNXOpen_Features_Text(NULL);

	int worklayer = -1;
	int layerStatus = -1;
	UF_LAYER_ask_work_layer(&worklayer);
	//UF_LAYER_ask_status(255,&layerStatus);
	//UF_LAYER_set_status(255, UF_LAYER_WORK_LAYER);

	NXOpen::Features::TextBuilder *textBuilder1;
	textBuilder1 = workPart->Features()->CreateTextBuilder(nullNXOpen_Features_Text);

	NXOpen::Point3d origin1(0.0, 0.0, 0.0);
	NXOpen::Vector3d normal1(0.0, 0.0, 1.0);
	NXOpen::Plane *plane1;
	plane1 = workPart->Planes()->CreatePlane(origin1, normal1, NXOpen::SmartObject::UpdateOptionWithinModeling);

	textBuilder1->SetSectionPlane(plane1);

	/*NXOpen::Unit *unit1;
	unit1 = textBuilder1->PlanarFrame()->Length()->Units();

	textBuilder1->FrameOnPath()->AnchorPosition()->Expression()->SetRightHandSide("50");*/

	//textBuilder1->SetOnFacePlacementMethod(NXOpen::Features::TextBuilder::OnFacePlacementMethodOptionsSectionPlane);

	textBuilder1->SetScript(NXOpen::Features::TextBuilder::ScriptOptionsWestern);

	textBuilder1->SetCanUseKerningSpaces(false);

	textBuilder1->PlanarFrame()->SetAnchorLocation(NXOpen::GeometricUtilities::RectangularFrameBuilder::AnchorLocationTypeBottomLeft);
	//textBuilder1->PlanarFrame()->Length()->SetRightHandSide("17.6908611782542");2.7*n

	textBuilder1->PlanarFrame()->Height()->SetRightHandSide(textHeight);

	textBuilder1->PlanarFrame()->SetWScale(100);
	textBuilder1->PlanarFrame()->Shear()->SetRightHandSide("0");

	/*textBuilder1->FrameOnPath()->SetAnchorLocation(NXOpen::GeometricUtilities::FrameOnPathBuilder::AnchorLocationTypeLeft);

	textBuilder1->FrameOnPath()->AnchorPosition()->Expression()->SetRightHandSide("30");

	textBuilder1->FrameOnPath()->AnchorPosition()->SetParameterUsed(false);

	textBuilder1->FrameOnPath()->Offset()->SetRightHandSide("4.5");

	textBuilder1->FrameOnPath()->Length()->SetRightHandSide("9.53025449104364");2.7*n*/

	//textBuilder1->FrameOnPath()->Height()->SetRightHandSide("4");

	//textBuilder1->FrameOnPath()->SetWScale(35.4339270372263);

	textBuilder1->SetCanProjectCurves(true);

	textBuilder1->SelectFont("宋体", NXOpen::Features::TextBuilder::ScriptOptionsWestern);//Arial

	textBuilder1->SetTextString(textStr);

	NXOpen::CoordinateSystem *coordinateSystem1;

	CoordinateSystemCollection *csysCollectionPtr = workPart->CoordinateSystems();
	NXMatrixCollection *matrixCollection = workPart->NXMatrices();
	double mtx[9], vx[3] = { xDirection1.X,xDirection1.Y,xDirection1.Z }, vy[3] = { yDirection1.X,yDirection1.Y,yDirection1.Z };
	UF_MTX3_initialize(vx, vy, mtx);
	Matrix3x3 element(mtx[0], mtx[1], mtx[2], mtx[3], mtx[4], mtx[5], mtx[6], mtx[7], mtx[8]);
	NXOpen::NXMatrix * orientation = matrixCollection->Create(element);

	//coordinateSystem1 = csysCollectionPtr->CreateCoordinateSystem(coordinates2,xDirection1, yDirection1);
	coordinateSystem1 = csysCollectionPtr->CreateCoordinateSystem(coordinates2, orientation, true);

	textBuilder1->PlanarFrame()->SetCoordinateSystem(coordinateSystem1);

	textBuilder1->PlanarFrame()->UpdateOnCoordinateSystem();

	NXOpen::Point *point2;
	point2 = workPart->Points()->CreatePoint(coordinates2);

	NXOpen::Point3d point3(coordinates2.X, coordinates2.Y, coordinates2.Z);
	//point2 = workPart->Points()->CreatePoint(point3);
	textBuilder1->PlanarFrame()->AnchorLocator()->SetValue(point2, workPart->ModelingViews()->WorkView(), point3);


	NXOpen::NXObject *nXObject1;
	nXObject1 = textBuilder1->Commit();

	tag_t texttag = nXObject1->Tag();

	textBuilder1->Destroy();

	plane1->DestroyPlane();
	//UF_LAYER_set_status(worklayer, UF_LAYER_WORK_LAYER);
	//UF_LAYER_set_status(255,layerStatus);
	return texttag;
}


using namespace NXOpen;
using namespace NXOpen::BlockStyler;

//------------------------------------------------------------------------------
// Initialize static variables
//------------------------------------------------------------------------------
Session *(CaoLiaoBianHao::theSession) = NULL;
UI *(CaoLiaoBianHao::theUI) = NULL;
//------------------------------------------------------------------------------
// Constructor for NX Styler class
//------------------------------------------------------------------------------
CaoLiaoBianHao::CaoLiaoBianHao()
{
    try
    {
        // Initialize the NX Open C++ API environment
        CaoLiaoBianHao::theSession = NXOpen::Session::GetSession();
        CaoLiaoBianHao::theUI = UI::GetUI();
        theDlxFileName = "CaoLiaoBianHao.dlx";
        theDialog = CaoLiaoBianHao::theUI->CreateDialog(theDlxFileName);
        // Registration of callback functions
        theDialog->AddApplyHandler(make_callback(this, &CaoLiaoBianHao::apply_cb));
        theDialog->AddOkHandler(make_callback(this, &CaoLiaoBianHao::ok_cb));
        theDialog->AddUpdateHandler(make_callback(this, &CaoLiaoBianHao::update_cb));
        theDialog->AddInitializeHandler(make_callback(this, &CaoLiaoBianHao::initialize_cb));
        theDialog->AddDialogShownHandler(make_callback(this, &CaoLiaoBianHao::dialogShown_cb));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        throw;
    }
}

//------------------------------------------------------------------------------
// Destructor for NX Styler class
//------------------------------------------------------------------------------
CaoLiaoBianHao::~CaoLiaoBianHao()
{
    if (theDialog != NULL)
    {
        delete theDialog;
        theDialog = NULL;
    }
}

void  GZ_EXPORT_NO_Main()
{
    CaoLiaoBianHao *theCaoLiaoBianHao = NULL;
    try
    {
        theCaoLiaoBianHao = new CaoLiaoBianHao();
        // The following method shows the dialog immediately
        theCaoLiaoBianHao->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    if(theCaoLiaoBianHao != NULL)
    {
        delete theCaoLiaoBianHao;
        theCaoLiaoBianHao = NULL;
    }
}

int CaoLiaoBianHao::Show()
{
    try
    {
        theDialog->Show();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//---------------------Block UI Styler Callback Functions--------------------------
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Callback Name: initialize_cb
//------------------------------------------------------------------------------
void CaoLiaoBianHao::initialize_cb()
{
    try
    {
        group0 = dynamic_cast<NXOpen::BlockStyler::Group*>(theDialog->TopBlock()->FindBlock("group0"));
        bodySelect0 = dynamic_cast<NXOpen::BlockStyler::BodyCollector*>(theDialog->TopBlock()->FindBlock("bodySelect0"));
        coord_system0 = dynamic_cast<NXOpen::BlockStyler::SpecifyCSYS*>(theDialog->TopBlock()->FindBlock("coord_system0"));
        double0 = dynamic_cast<NXOpen::BlockStyler::DoubleBlock*>(theDialog->TopBlock()->FindBlock("double0"));
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: dialogShown_cb
//This callback is executed just before the dialog launch. Thus any value set 
//here will take precedence and dialog will be launched showing that value. 
//------------------------------------------------------------------------------
void CaoLiaoBianHao::dialogShown_cb()
{
    try
    {
        //---- Enter your callback code here -----
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
}

//------------------------------------------------------------------------------
//Callback Name: apply_cb
//------------------------------------------------------------------------------
int CaoLiaoBianHao::apply_cb()
{
    int errorCode = 0;
    try
    {
		tag_t body = 0;
		std::vector<NXOpen::TaggedObject* > objects = bodySelect0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
		if (objects.size() > 0)
		{
			body = objects[0]->Tag();
		}
		else
			return 0;

		char textHei[64] = "3";
		double hei = double0->GetProperties()->GetDouble("Value");
		sprintf(textHei, "%f", hei);
		Royal_set_obj_attr(body, "输出材料编号", "1");
		Point3d  originPoint(5, 5, 0);
		double csysorg[3] = { 5,5,0 };
		double org[3] = { 0,0,0 };
		Vector3d vecDirX(1, 0, 0);
		Vector3d vecDirY(0, 1, 0);
		tag_t workcsys = NULL_TAG;
		UF_CSYS_ask_wcs(&workcsys);
		std::vector<NXOpen::TaggedObject* > csysObjects = coord_system0->GetProperties()->GetTaggedObjectVector("SelectedObjects");
		if (csysObjects.size() > 0)
		{
			tag_t csys_tag = csysObjects[0]->Tag();
			NXOpen::CoordinateSystem *coord_system = (NXOpen::CoordinateSystem *)NXOpen::NXObjectManager::Get(csys_tag);
			originPoint = coord_system->Origin();
			NXOpen::NXMatrix *matrix = coord_system->Orientation();
			Matrix3x3 matrix33 = matrix->Element();
			vecDirX.X = matrix33.Xx;
			vecDirX.Y = matrix33.Xy;
			vecDirX.Z = matrix33.Xz;
			vecDirY.X = matrix33.Yx;
			vecDirY.Y = matrix33.Yy;
			vecDirY.Z = matrix33.Yz;
			tag_t temp = NULL_TAG;
			int irc = UF_CSYS_set_wcs(csys_tag);
			UF_CSYS_map_point(UF_CSYS_ROOT_WCS_COORDS, csysorg, UF_CSYS_ROOT_COORDS, org);
			UF_CSYS_set_wcs(workcsys);
			originPoint.X = org[0];
			originPoint.Y = org[1];
			originPoint.Z = org[2];
		}

		char no[128] = "";
		USER_ask_obj_string_attr(body, "材料编号", no);
		tag_t textTag = CreateText(NXString(no), textHei, originPoint, vecDirX, vecDirY);
		char *handle = 0;
		UF_TAG_ask_handle_from_tag(RY_Prototype(textTag), &handle);
		Royal_set_obj_attr(body, ATTR_RY_TEXT_SPLINE_BODY_HANDLE, handle);
		UF_free(handle);

    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Callback Name: update_cb
//------------------------------------------------------------------------------
int CaoLiaoBianHao::update_cb(NXOpen::BlockStyler::UIBlock* block)
{
    try
    {
        if(block == bodySelect0)
        {
        //---------Enter your code here-----------
        }
        else if(block == coord_system0)
        {
        //---------Enter your code here-----------
        }
        else if(block == double0)
        {
        //---------Enter your code here-----------
        }
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return 0;
}

//------------------------------------------------------------------------------
//Callback Name: ok_cb
//------------------------------------------------------------------------------
int CaoLiaoBianHao::ok_cb()
{
    int errorCode = 0;
    try
    {
        errorCode = apply_cb();
    }
    catch(exception& ex)
    {
        //---- Enter your exception handling code here -----
        errorCode = 1;
        CaoLiaoBianHao::theUI->NXMessageBox()->Show("Block Styler", NXOpen::NXMessageBox::DialogTypeError, ex.what());
    }
    return errorCode;
}

//------------------------------------------------------------------------------
//Function Name: GetBlockProperties
//Description: Returns the propertylist of the specified BlockID
//------------------------------------------------------------------------------
PropertyList* CaoLiaoBianHao::GetBlockProperties(const char *blockID)
{
    return theDialog->GetBlockProperties(blockID);
}
